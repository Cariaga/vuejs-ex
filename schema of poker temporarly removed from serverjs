
let ContactSchema = mongoose.Schema({ContactID:  'String',
				Email:  'String',
				PhoneNumber: 'String'});

let GameHistorySchema = mongoose.Schema({
          SeasonID: {type:String, default: ""},
				  RoundID:{type:String, default: ""},
				  RoomID:{type:String, default: ""},
				  Rank:  {type:String, default: ""},
				  Score: {type:Number, default: 0},
				  Card:{type:String, default: ""},
				  Date: {type:String, default: ""},
				  Time:{type:String, default: ""},
				  BeforePoints: {type:String, default: ""},
          AfterPoints:{type:String, default: ""}});

console.log("Passed GameHistorySchema");
let LoginHistorySchema = mongoose.Schema({HistoryID:'String',
				   IP: 'String',
				   Time: 'String',
				   Date:'String'});
console.log("Passed LoginHistorySchema");

let UserAccountSchema = mongoose.Schema({AccountType:'String',
				  UserName: 'String',
				  Password:'String',
				  Verify: 'Boolean'});
console.log("Passed UserAccountSchema");

let BankInformationSchema = mongoose.Schema({Name:  'String',
				      BankName:  'String',
				      SecurityCode: 'String'});

let BlackListSchema = mongoose.Schema({BlackListID: 'String',
				Reason:  'String',
				Time: 'String',
				Date: 'String',
				ReleaseDate:  'String'});

let SupportTicketSchema = mongoose.Schema({SupportTicketID: 'String',
				    Title: 'String',
				    Description: 'String',
				    Reason: 'String',
				    Date:  'String',
				    Time: 'String',
            Status: 'String'});
            
console.log("Passed SupportTicketSchema");

let PlayerSchema = mongoose.Schema({UserID:'String',
			     ScreenName:'String',
			     Name:'String',
			     Surname:'String',
			     RegisteredDate:'String',
			     RegisteredTime: 'String',
			     CurrentRoomName:'String',
			     GameHistory:[GameHistorySchema],
			     LoginHistory:[LoginHistorySchema],
			     UserAccount:[UserAccountSchema],
			     BankInformation:[BankInformationSchema],
			     BlackList:[BlackListSchema],
			     SupportTicket:[SupportTicketSchema]
			     });

console.log("Passed PlayerSchema");

let ShopSchema = mongoose.Schema({ShopID:  'String',
				Name: 'String',
				RegisteredDate: 'Number',
				RegisteredTime: 'String',
				Description:'String',
			    Contact:[ContactSchema],
			    Shop:[PlayerSchema]
			   });

console.log("Passed ShopSchema");

let DistributorSchema = mongoose.Schema({DistributorID:'String',
				   Shop:[ShopSchema],
				   Contact:[ContactSchema]
				  
          });
console.log("Passed DistributorSchema");


let HeadOfficeSchema = mongoose.Schema({Distributor:[DistributorSchema],
				 Contact:[ContactSchema]
				 });

console.log("Passed HeadOfficeSchema");

let NotificationSchema = mongoose.Schema({NotificationID: 'String',
				   NotificationType: 'String',
				   Title: 'String',
				   Time:'String',
				   Date:  'String',
           Description: 'String'});
           
console.log("Passed NotificationSchema");   

/*
let DepositHistory = mongoose.Schema({UserID:'String',
				     Time: 'String',
				     Date: 'String',
				     Amount: 'Number',
				     Status: 'String'});

let WithdrawHistory = mongoose.Schema({UserID: 'String',
				      Time: 'String',
				      Date: 'String',
				      Amount:'Number',
				      Status:  'String'});*/

  /*
var HeadOffice = mongoose.model('HeadOffice', HeadOfficeSchema, 'HeadOffice');
var Distributor = mongoose.model('Distributor', DistributorSchema, 'Distributor');
var Shop = mongoose.model('Shop', ShopSchema, 'Shop');
var Player = mongoose.model('Player', PlayerSchema, 'Player');
var SupportTicket = mongoose.model('SupportTicket', SupportTicketSchema, 'SupportTicket');
var BlackList = mongoose.model('BlackList', BlackListSchema, 'BlackList');
var BankInformation = mongoose.model('BankInformation', BankInformationSchema, 'BankInformation');
var UserAccount = mongoose.model('UserAccount', UserAccountSchema, 'UserAccount');
var LoginHistory = mongoose.model('LoginHistory', LoginHistorySchema, 'LoginHistory');
var GameHistory = mongoose.model('GameHistory', GameHistorySchema,'GameHistory');
var Contact = mongoose.model('Contact', ContactSchema, 'Contact');
console.log("Passed GameHistory");

var ToAddContact = new Contact({ });*/
/*ToAddContact.save(function (err) {
  if (err) return handleError(err);
  // saved!
});*/
/*
var ToAddGameHistory =[{
          SeasonID: 'somthing',
				  RoundID:'somthing',
				  RoomID:'somthing',
				  Rank:  'somthing',
				  Score: 8,
				  Card:'somthing',
				  Date: 'somthing',
				  Time:'somthing',
				  BeforePoints: 'somthing',
				  AfterPoints:'somthing'
 }];


 GameHistory.collection.insert(ToAddGameHistory, function (err, docs) {
  if (err){ 
      return console.error(err);
  } else {
    console.log("Multiple documents inserted to Collection");
  }
});*/




/*ToAddGameHistory.save(function (err) {
  if (err) return handleError(err);
  // saved!
});*/

/*
var NewHeadOffice = [{}];



HeadOffice.collection.insert(NewHeadOffice, function (err, docs) {
      if (err){ 
          return console.error(err);
      } else {
        console.log("Multiple documents inserted to Collection");
      }
    });



// define Schema
    var BookSchema = mongoose.Schema({
      name: String,
      price: Number,
      quantity: Number
    });
 
    // compile schema to model
    var Book = mongoose.model('Book', BookSchema, 'bookstore');
 
    // documents array
    var books = [{ name: 'Mongoose Tutorial', price: 10, quantity: 25 },
                    { name: 'NodeJS tutorial', price: 15, quantity: 5 },
                    { name: 'MongoDB Tutorial', price: 20, quantity: 2 }];
 
    // save multiple documents to the collection referenced by Book Model
    Book.collection.insert(books, function (err, docs) {
      if (err){ 
          return console.error(err);
      } else {
        console.log("Multiple documents inserted to Collection");
      }
    });

   // var queried = Book.collection.find({price:5});//not working

    Book.find().exec(function (err, results) {
      var count = results.length;
      console.log(count);
    });
*/
    
// Equivalent
/*var HeadOffice = new Schema({
  Distributor: [new Schema({ name: 'string' })]
});*/
